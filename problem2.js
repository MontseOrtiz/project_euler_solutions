// Even Fibonacci numbers
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
// By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
// find the sum of the even-valued terms.




//First we have to understand how Fibonacci sequence works, then whe know that the sequence start with 0, 1 then 1 therefore we hace the next
//sequence 0,1,1, So we have to find the next number of the sequence, that's why we start declaring the following variables.

function EvenFibonacciNumber(){
    //Array where we going to save the even-valued Fibonacci terms
    let fibonacciNumersPairs = []
    //Save the last number we found of the fibbonacci sequence
    let lastNumber = 1
    //Save the previous number of the fibbonacci sequence 
    let previousNumber = 0 
    // Save de sum of the last and previus number, then this result will become the last number.
    let currentNumber = 0


  


    for (let i = 1; i <= 1000; i++){
        //First we have to find the next number 
        currentNumber = previousNumber + lastNumber

        //Now last number is gong to be the previous number 
        previousNumber = lastNumber

        //The result of sum is going to be now the last number 
        lastNumber = currentNumber

        //we need to find if the current number is even, if its even we can add to fibonacci numbers pairs 

        if(currentNumber%2 === 0 && currentNumber <= 4000000){
            fibonacciNumersPairs.push(currentNumber)
        }

    }

    //we have to reduce the array with the even fibonacci terms 
    let total = fibonacciNumersPairs.reduce((a, b) => a + b, 0)

    return total
}

console.log(EvenFibonacciNumber()); 


//Answer 4613732




